;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;;;; Tools
     ;;;; restclient
     helm
     (auto-completion :variables
                      auto-completion-return-key-behavior 'complete
                      auto-completion-tab-key-behavior 'cycle
                      auto-completion-private-snippets-directory nil)
     ;; better-defaults
     spell-checking
     syntax-checking
     ;; version-control
     ranger
     git
     github
     imenu-list

     ;;;; Languages
     (org :variables
          org-enable-github-support t
          org-enable-roam-support nil  ;; This breaks daemon
          org-enable-reveal-js-support t)
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     (python :variables
             python-backend 'lsp
             python-lsp-server 'pylsp
             python-test-runner 'pytest)
     typescript
     emacs-lisp
     ansible
     ipython-notebook
     yaml
     ;; markdown
     (markdown :variables markdown-live-preview-engine 'vmd)
     ;; latex
     html
     systemd
     rust  ;; for toml
     (javascript :variables javascript-backend 'lsp)
     graphviz
     vue
     (c-c++ :variables c-c++-backend 'lsp-ccls)

     ;; random
     xkcd

     lsp
     dap
     docker
     )

   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '(
                                      quelpa-use-package
                                      pkgbuild-mode
                                      cl-generic
                                      rst
                                      editorconfig
                                      polymode
                                      org-caldav
                                      org-ref
                                      ;;org-plus-contrib
                                      (org-now :location (recipe :fetcher github :repo "alphapapa/org-now"))
                                      org-super-agenda
                                      git-auto-commit-mode
                                      dash
                                      real-auto-save
                                      scad-mode
                                      scad-preview
                                      ox-reveal
                                      secretaria
                                      org-analyzer
                                      org-clock-convenience
                                      htmlize
                                      code-review
                                      (uwu-theme :location (recipe :fetcher github :repo "kborling/uwu.el"))
                                      )
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; File path pointing to emacs 27.1 executable compiled with support
   ;; for the portable dumper (this is currently the branch pdumper).
   ;; (default "emacs")
   dotspacemacs-emacs-pdumper-executable-file "emacs"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=~/.emacs.d/.cache/dumps/spacemacs.pdmp
   ;; (default spacemacs.pdmp)
   dotspacemacs-emacs-dumper-dump-file "spacemacs.pdmp"

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default nil)
   dotspacemacs-verify-spacelpa-archives nil

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update t
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim

   ;; If non-nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(uwu
                         monokai
                         spacemacs-dark
                         spacemacs-light)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '(("Fira Code"
                                :size 15
                                :weight medium
                                :width normal)
                               ("Fira Code Symbol"
                                :size 15
                                :weight normal
                                :width normal
                                :powerline-scale 1.1))

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; If non-nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ nil

   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t

   ;; If non-nil, `J' and `K' move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil

   ;; If non-nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil

   ;; if non-nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil

   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom

   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always

   ;; If non-nil, the paste transient-state is enabled. While enabled, pressing
   ;; `p' several times cycles through the elements in the `kill-ring'.
   ;; (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 100

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 80

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non-nil unicode symbols are displayed in the mode line.
   ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
   ;; the value to quoted `display-graphic-p'. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers nil

   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server nil

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir nil

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server t

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%I@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  ;; (ido-mode -1)
  (setenv "DOTNET_SYSTEM_GLOBALIZATION_INVARIANT" "1")
  ;; (if (string= "dolgoch" (system-name))
  ;;     (setq-default dotspacemacs-default-font
  ;;                   '("Source Code Pro"
  ;;                     :size 14
  ;;                     :weight normal
  ;;                     :width normal)))
  (setq web-mode-markup-indent-offset 2) ; web-mode, html tag in html file
  )

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
 This function is called at the very end of Spacemacs initialization after
layers configuration. You are free to put any user code."

  ;; Host specific Configuration
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; it looks for a file names <hostname>.el and loads it if present
  ;; use it for require-ing different configs for each machine you use
  (setq cadair-local-filename (concat system-name ".el"))
  (setq cadair-local-file (expand-file-name cadair-local-filename "~/.config/spacemacs/"))
  (when (file-readable-p cadair-local-file)
    (load-file cadair-local-file))

  ;; General Spacemacs Tweaks
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq lsp-headerline-arrow "❱")
  (spacemacs/toggle-indent-guide-globally-on)
  (require 'dap-node)
  (setq paradox-github-token t)
  ;; (with-eval-after-load "ispell"
  ;;   (setq ispell-program-name "hunspell")
  ;;   ;; ispell-set-spellchecker-params has to be called
  ;;   ;; before ispell-hunspell-add-multi-dic will work
  ;;   (ispell-set-spellchecker-params)
  ;;   ;; (ispell-hunspell-add-multi-dic "en_GB")
  ;;   (setq ispell-dictionary "en_GB"))
  (setq native-comp-async-report-warnings-errors nil)
  (setq comp-deferred-compilation nil)

  ;; Shortcut to start a terminal
  (spacemacs/set-leader-keys "at" 'ansi-term)
  (defun cadair-cistern ()
    (interactive)
    (ansi-term "/home/stuart/.local/bin/cistern")
    )

  (spacemacs/set-leader-keys "ci" 'cadair-cistern )
  ;; Use K and J to page up and page down
  (define-key evil-normal-state-map (kbd "K") 'scroll-down-command )
  (define-key evil-normal-state-map (kbd "J") 'scroll-up-command )
  (define-key evil-normal-state-map (kbd ",,") 'spacemacs/evil-search-clear-highlight )
  (add-hook 'doc-view-mode-hook 'auto-revert-mode)

  (spacemacs/set-leader-keys "ar" 'ranger )

  ;; Set default notebook port to be my background jupyter server
  (setq-default
   ein:default-url-or-port "8215")
  ;; Hide __pycache__ from neotree
  (with-eval-after-load 'neotree
    (setq-default neo-show-hidden-files t)
    (add-to-list 'neo-hidden-regexp-list "__pycache__")
    (add-to-list 'neo-hidden-regexp-list "\\.egg-info$")
    )

  ;; git-auto-commit
  (setq gac-automatically-push-p t)

  ;; dewrap
  (defun remove-newlines-in-region ()
    "Removes all newlines in the region."
    (interactive)
    (save-restriction
      (narrow-to-region (point) (mark))
      (goto-char (point-min))
      (while (search-forward "\n" nil t) (replace-match " " nil t))))


  ;; PythonTeX Polymode
  ;;;;;;;;;;;;;;;;;;;;;
  ;; (setq load-path
  ;;       (append '("~/.config/spacemacs/.polymode/")
  ;;               load-path))
  ;; (require 'poly-pythontex)

  ;; Disable automatic enable
  ;; (add-to-list 'auto-mode-alist '("\\.tex" . poly-pythontex-mode))


  ;; MyPy
  ;; (require 'flycheck-mypy)
  ;; (add-hook 'python-mode-hook 'flycheck-mode)


  ;; Jupyter Mode
  ;;;;;;;;;;;;;;;
  (defun cadair:notebook-restart-and-run-all ()
    ein:notebook-restart-kernel-command())

  (spacemacs/set-leader-keys-for-major-mode 'ein:notebook-multilang-mode "r" 'ein:notebook-restart-kernel-command)
  (spacemacs/set-leader-keys-for-major-mode 'ein:notebook-multilang-mode "e" 'ein:worksheet-execute-all-cell)

  ;; Xonsh mode
  ;;;;;;;;;;;;;

  (define-derived-mode xonsh-mode python-mode "Xonsh Mode"
    "A mode for .xsh files.")

  (add-to-list 'auto-mode-alist '("\\.xsh\\'" . xonsh-mode))
  (add-to-list 'auto-mode-alist '("\\.xonshrc\\'" . xonsh-mode))

  ;;;;;;;;;;;;;;
  ;; Org Mode ;;
  ;;;;;;;;;;;;;;

  ;; Global Key Bindings
  ;;;;;;;;;;;;;;;;;;;;;;
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "I" 'org-clock-in)
  (spacemacs/set-leader-keys-for-major-mode 'org-agenda "I" 'org-clock-in)
  (spacemacs/set-leader-keys "aoO" 'org-clock-out)
  (spacemacs/declare-prefix "o" "Org Mode Global")
  (spacemacs/set-leader-keys "oa" 'org-agenda)
  (spacemacs/set-leader-keys "ot" (lambda() (interactive)(find-file "~/Notebooks/ToDo.org")))
  (spacemacs/set-leader-keys "oh" 'org-insert-todo-heading)
  (spacemacs/set-leader-keys "os" 'org-insert-todo-subheading)
  (spacemacs/set-leader-keys "oc" 'org-capture)

  (setq load-path
        (append '("~/.config/spacemacs/ox-ipynb/")
                load-path))
  (require 'ox-ipynb)
  (require 'org-depend)
  (require 'ox-reveal)
  (setq org-roam-directory "~/Notebooks/roam")
  (setq org-roam-db-location "~/SyncBox/org-roam.db")

  (defun org-toc ()
    (interactive)
    (let ((headings (delq nil (loop for f in (f-entries "." (lambda (f) (f-ext? f "org")) t)
                                    append
                                    (with-current-buffer (find-file-noselect f)
                                      (org-map-entries
                                       (lambda ()
                                         (when (> 2 (car (org-heading-components)))
                                           (cons f (nth 4 (org-heading-components)))))))))))
      (switch-to-buffer (get-buffer-create "*toc*"))
      (erase-buffer)
      (org-mode)
      (loop for (file . heading) in headings
            do
            (insert (format "* %s\n" heading)))))

  ;; Define a key in evil normal mode when org-mode
  (evil-define-key 'normal org-mode-map (kbd "t") 'org-todo)

  (define-key spacemacs-org-agenda-mode-map (kbd "<S-up>") 'org-clock-convenience-timestamp-up)

  (with-eval-after-load 'org

    (require 'org-capture)
    (require 'org-protocol)
    (require 'org-habit)

    ;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

    (setq org-startup-truncated nil)
    (load-file (expand-file-name "~/.config/spacemacs/bh-org.el"))
    (load-file (expand-file-name "~/.config/spacemacs/cadair-org-mode.el"))
    ;; (load-file (expand-file-name "~/.config/spacemacs/ox-confluence.el"))

    (require 'ox-confluence)
    ;; End Org Mode Section
    )

  ;; GPG Encryption
  ;;;;;;;;;;;;;;;;;
  (require 'epa-file)
  (epa-file-enable)

  ;; Enable editorconfig by default
  (editorconfig-mode 1)

  ;; Python tweaks and stuff
  ;;;;;;;;;;;;;;;;;;;;;;;;;;

  (setq python-auto-set-local-pyvenv-virtualenv "on-project-switch")

  ;; pyright lsp config
  (setq lsp-pyright-diagnostic-mode "openFilesOnly")
  (setq lsp-enable-file-watchers nil)
  (setq lsp-file-watch-threshold 100)
  (setq lsp-file-watch-ignored
        '("[/\\\\]\\.git"
          "[/\\\\]\\.hg"
          "[/\\\\]\\.bzr"
          "[/\\\\]_darcs"
          "[/\\\\]\\.svn"
          "[/\\\\]_FOSSIL_"
          "[/\\\\]\\.idea"
          "[/\\\\]\\.ensime_cache"
          "[/\\\\]\\.eunit"
          "[/\\\\]node_modules"
          "[/\\\\]\\.fslckout"
          "[/\\\\]\\.tox"
          "[/\\\\]\\.hypothesis"
          "[/\\\\]__pycache__"
          "[/\\\\]\\.mypy_cache"
          "[/\\\\]\\.pytest_cache"
          "[/\\\\]_build"
          "[/\\\\]\\.eggs"
          "[/\\\\]\\.stack-work"
          "[/\\\\]\\.bloop"
          "[/\\\\]\\.metals"
          "[/\\\\]target"
          "[/\\\\]\\.ccls-cache"
          "[/\\\\]\\.deps"
          "[/\\\\]build-aux"
          "[/\\\\]autom4te.cache"
          "[/\\\\]\\.reference"

          "[/\\\\]\\.docker"
          "[/\\\\]dist-newstyle"
          "[/\\\\]dist"
          "[/\\\\]Documentation"
          "[/\\\\]containers"
          "[/\\\\]tf"
          "[/\\\\]\\.semaphore"
          "[/\\\\].*swp$"
          "\./nix/materialized"))

  ;; pylsp config
  ;; (custom-set-variables '(lsp-pylsp-configuration-sources ["flake8"]))
  (custom-set-variables '(lsp-pylsp-plugins-mccabe-enabled nil))
  (custom-set-variables '(lsp-pylsp-plugins-pycodestyle-enabled nil))
  (custom-set-variables '(lsp-pylsp-plugins-pydocstyle-enabled nil))
  (custom-set-variables '(lsp-pylsp-plugins-pyflakes-enabled t))
  (custom-set-variables '(lsp-pylsp-plugins-pylint-enabled t))
  (custom-set-variables '(lsp-pylsp-plugins-flake8-enabled nil))

  (defun cadair/run-restart-repl ()
    "Run a new python repl in a window which does not have focus."
    (interactive)
    (setq initial-buffer (current-buffer))
    (if (python-shell-get-buffer)
        (kill-buffer (python-shell-get-buffer)))
    (run-python)
    (pop-to-buffer (python-shell-get-buffer))
    (evil-normal-state)
    (pop-to-buffer initial-buffer)
    )

  (defun cadair/run-in-repl (arg)
    "Run a python buffer in a new ipython repl"
    (interactive "P")
    (cadair/run-restart-repl)
    (python-shell-send-buffer)
    )

  (defun cadair/run-in-repl-switch (arg)
    "Run a python buffer in a new ipython repl"
    (interactive "P")
    (cadair/run-restart-repl)
    (spacemacs/python-shell-send-buffer-switch)
    )

  (spacemacs/set-leader-keys-for-major-mode 'python-mode
    "e" 'cadair/run-in-repl
    "E" 'cadair/run-in-repl-switch)

  (defsubst python-in-string/comment ()
    "Return non-nil if point is in a Python literal (a comment or string)."
    ;; We don't need to save the match data.
    (nth 8 (syntax-ppss)))

  (setq pytest-cmd-flags "-x -s --remote-data=any")

  ;; Add to __all__
  (defun python-add-to-all ()
    "Take the symbol under the point and add it to the __all__ list, if it's not already there."
    (interactive)
    (save-excursion
      (let ((thing (thing-at-point 'symbol)))
        (if (progn (goto-char (point-min))
                   (let (found)
                     (while (and (not found)
                                 (re-search-forward (rx symbol-start "__all__" symbol-end
                                                        (0+ space) "=" (0+ space)
                                                        (syntax open-parenthesis))
                                                    nil t))
                       (setq found (not (python-in-string/comment))))
                     found))
            (when (not (looking-at (rx-to-string
                                    `(and (0+ (not (syntax close-parenthesis)))
                                          (syntax string-quote) ,thing (syntax string-quote)))))
              (insert (format "\'%s\', " thing)))
          (beginning-of-buffer)
          ;; Put before any import lines, or if none, the first class or
          ;; function.
          (when (re-search-forward (rx bol (or "import" "from") symbol-end) nil t)
            (re-search-forward (rx symbol-start (or "def" "class") symbol-end) nil t))
          (forward-line -1)
          (insert (format "\n__all__ = [\'%s\']\n\n" thing))))))

  ;; Reset shell
  (setenv "SHELL" "/usr/bin/bash")
  ;; (setq explicit-shell-file-name "/bin/xonsh")
  )

(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(evil-want-Y-yank-to-eol nil)
 '(lsp-clients-python-library-directories '("/usr/" "/home/stuart/.virtualenvs/"))
 '(lsp-pyls-configuration-sources ["flake8"])
 '(lsp-pyls-plugins-mccable-enabled nil)
 '(lsp-pyls-plugins-pycodestyle-enabled t)
 '(lsp-pyls-plugins-pyflakes-enabled nil)
 '(lsp-pyls-plugins-pylint-args ["--disable=R"])
 '(lsp-pyls-plugins-pylint-enabled t)
 '(lsp-pyls-plugins-pyls_mypy-enabled t)
 '(lsp-pyls-plugins-pyls_mypy-live_mode nil)
 '(lsp-pylsp-configuration-sources ["flake8"])
 '(lsp-pylsp-plugins-flake8-enabled t)
 '(lsp-pylsp-plugins-mccabe-enabled nil)
 '(lsp-pylsp-plugins-pycodestyle-enabled nil)
 '(lsp-pylsp-plugins-pydocstyle-enabled nil)
 '(lsp-pylsp-plugins-pyflakes-enabled nil)
 '(lsp-pylsp-plugins-pylint-enabled nil)
 '(org-agenda-files
   '("/home/stuart/Notebooks/Aperio.org" "/home/stuart/Notebooks/DKIST.org" "/home/stuart/Notebooks/Notes.org" "/home/stuart/Notebooks/Radio.org" "/home/stuart/Notebooks/SunPy.org" "/home/stuart/Notebooks/ToDo.org" "/home/stuart/Notebooks/Travel_List.org" "/home/stuart/Notebooks/books.org" "/home/stuart/Notebooks/calendar.org" "/home/stuart/Notebooks/now.org" "/home/stuart/Notebooks/refile.org" "/home/stuart/Notebooks/tywyn_network.org" "/home/stuart/Notebooks/usertools_overview.org"))
 '(package-selected-packages
   '(magit-todos dockerfile-mode docker tablist docker-tramp evil-collection annalist org-clock-convenience ox-jira org-jira tide typescript-mode import-js grizzl add-node-modules-path yasnippet-snippets yapfify yaml-mode xterm-color xkcd ws-butler writeroom-mode winum which-key web-mode web-beautify volatile-highlights vmd-mode vi-tilde-fringe uuidgen treemacs-projectile treemacs-evil toml-mode toc-org tagedit systemd symon symbol-overlay string-inflection spaceline-all-the-icons smeargle slim-mode shell-pop scss-mode sass-mode restart-emacs real-auto-save ranger rainbow-delimiters racer quelpa-use-package pytest pyenv-mode py-isort pug-mode prettier-js popwin pkgbuild-mode pippel pipenv pip-requirements persp-mode pcre2el password-generator paradox ox-gfm overseer orgit org-super-agenda org-ref org-re-reveal org-projectile org-present org-pomodoro org-now org-mime org-download org-cliplink org-caldav org-brain open-junk-file ob-ipython nodejs-repl nim-mode nameless multi-term move-text monokai-theme mmm-mode markdown-toc magit-svn magit-gitflow macrostep lsp-ui lsp-treemacs lsp-python-ms lorem-ipsum livid-mode live-py-mode link-hint json-navigator json-mode js2-refactor js-doc jinja2-mode indent-guide importmagic impatient-mode hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation helm-xref helm-themes helm-swoop helm-pydoc helm-purpose helm-projectile helm-org-rifle helm-org helm-mode-manager helm-make helm-lsp helm-gitignore helm-git-grep helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag graphviz-dot-mode google-translate golden-ratio gnuplot gitignore-templates github-search github-clone gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe git-gutter-fringe+ git-auto-commit-mode gist gh-md fuzzy forge font-lock+ flyspell-correct-helm flycheck-rust flycheck-pos-tip flycheck-package flycheck-nim flx-ido fill-column-indicator fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-textobj-line evil-surround evil-org evil-numbers evil-nerd-commenter evil-matchit evil-magit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-escape evil-ediff evil-cleverparens evil-args evil-anzu eval-sexp-fu eshell-z eshell-prompt-extras esh-help emmet-mode elisp-slime-nav ein editorconfig dumb-jump dotenv-mode doom-modeline diminish diff-hl devdocs define-word dap-mode cython-mode company-web company-tern company-statistics company-lsp company-ansible company-anaconda column-enforce-mode clean-aindent-mode centered-cursor-mode cargo browse-at-remote blacken auto-yasnippet auto-highlight-symbol auto-dictionary auto-compile ansible-doc ansible aggressive-indent ace-link ace-jump-helm-line ac-ispell))
 '(warning-suppress-types
   '((use-package)
     ((python python-shell-completion-native-turn-on-maybe)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(highlight-parentheses-highlight ((nil (:weight ultra-bold))) t)
 '(org-done ((t (:weight normal :strike-through t))))
 '(org-headline-done ((((class color) (min-colors 16)) (:strike-through t)))))
)
